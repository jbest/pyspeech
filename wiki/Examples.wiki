#labels Featured
If you have any trouble with the examples below, please [Discussion leave a comment] about it, and I or another user will be glad to help you out.

== Quick reference ==

{{{speech}}} module functions:

  * {{{speech.say(phrase)}}}: speak out loud.

  * {{{speech.listenforanything(callback) -> Listener}}}: when any dictation is heard, run the callback on a separate thread (see below for details).
  * {{{speech.listenfor(phraselist, callback) -> Listener}}}: when any string in the given list of phrases is heard, run the callback on a separate thread (see below for details.)

  * {{{speech.islistening()}}}: True if any {{{Listener}}}s are listening.
  * {{{speech.stoplistening()}}}: stops all {{{Listener}}}s.

Format of the callback function passed to {{{listenfor()}}} and {{{listenforanything()}}}:
  * {{{callback(heard_phrase, Listener)}}}: First arg is a string containing the text of the phrase that was heard.  Second arg is the {{{Listener}}} that heard the phrase -- the same {{{Listener}}} that was returned by {{{listenfor()}}} in the first place.

{{{Listener}}} instance methods (call these on the object returned by {{{listenfor()}}} or passed to the callback):

  * {{{islistening()}}}: True if the {{{Listener}}} hasn't been stopped yet.
  * {{{stoplistening()}}}: stops the {{{Listener}}}.  You can't start it again after that.

== Simple example ==

Repeats whatever it hears you say, until you say "turn off".

{{{
import speech

def response(phrase, listener):
    speech.say("You said %s" % phrase
    if phrase == "turn off":
        listener.stoplistening()

listener = speech.listenforanything(response)

import time
while listener.islistening():
    time.sleep(.1)
}}}

== Using listenfor() ==

Replace the {{{listenforanything}}} call above with

{{{ listener = speech.listenfor(['turn off', 'hello', 'how are you'], response) }}}

and {{{speech}}} will only call the response callback if one of those phrases is heard.  You can use as many phrases as you wish; I've successfully used 12,000 sentences!

== Using all functionality ==

See the inline comments and assertions.

{{{
import speech

speech.say("I am speaking out loud.")

# Handle a specific set of heard phrases with a callback.
def L1callback(phrase, listener):
  print "Heard the phrase: %s" % phrase
L1 = speech.listenfor(["any of", "these will", "match"], L1callback)
       
# You can listen for multiple things at once, doing different
# things for each.
def L2callback(phrase, listener):
  print "Another phrase: %s" % phrase
L2 = speech.listenfor(["good morning Michael"], L2callback)

# You can listen for general dictation as well.  You can
# stop listening using the callback's second argument.
def L3callback(phrase, listener):
  speech.say(phrase) # repeat it back
  if phrase == "stop now please":
    listener.stoplistening()

L3 = speech.listenforanything(L3callback)

# All callbacks get automatically executed on a single separate thread.
# Meanwhile, you can just do whatever with your program, or sleep.
# As long as your main program is running code, speech will keep
# listening.

import time
while L3.islistening(): # till "stop now please" is heard
  time.sleep(1)

assert not L3.islistening()
assert speech.islistening() # to anything
print "Dictation is now stopped, L1 and L2 are still going."

L1.stoplistening()
print "Now only L2 is going"

# Listen for L2 for a while more, then turn it off.
time.sleep(30)

speech.stoplistening() # stop all remaining listeners
assert not speech.islistening()

}}}